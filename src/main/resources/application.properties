#### 1、指定为开发环境
spring.profiles.active=dev

##登录端口、github账号等配置
server.port=8887
#spring.thymeleaf.prefix=classpath:/templates/
github.client_id=a409bc93a7e8370fecc8
github.client_secret=695c79adb3ae8563436d589745ac6a7a067dea23
github.redirect_url=http://localhost:8887/callback


#### 2、数据库配置
#连接地址 端口号 驼峰开启、sql语句日志等等
spring.datasource.url=jdbc:h2:~/communit
spring.datasource.username=sa
spring.datasource.password=123456
spring.datasource.driver-class-name=org.h2.Driver
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.type-aliases-package=com.hxsd.mapper
mybatis.mapper-locations=classpath:mapper/*.xml
#logging.level.com.hxsd.mapper=debug


#### 3、引入druid数据源
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#spring.datasource.filters: wall
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true





#服务重启是否开启
spring.devtools.restart.enabled=true
#spring.devtools.restart.exclude=static/**,public/**

#spring.mvc.static-path-pattern=/static/**


#日志级别
logging.level.com.hxsd=trace
# 不指定路径在当前项目下生成springboot.log日志
# 可以指定完整的路径；
#logging.file=E:/springboot.log
#logging.file=hxsd.log

# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件
#logging.path=/spring/log
# 在控制台输出的日志的格式
#logging.pattern.console=%d{yyyy-MM-dd}---- [%thread]---- %-5level---- %logger{50} ---- %msg%n
# 指定文件中日志输出的格式
#logging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n


# BANNER
spring.banner.charset=UTF-8
spring.banner.location=classpath:banner.txt
spring.banner.image.location=classpath:banner.gif
spring.banner.image.width=76
spring.banner.image.height=3
spring.banner.image.margin=2
spring.banner.image.invert=false

#设置spring-boot 编码格式
server.tomcat.uri-encoding=UTF-8
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true
spring.messages.encoding=UTF-8